#!/usr/bin/env node

/**
 * Á∞°Âçò„Å™403„Ç®„É©„ÉºÂàÜÊûê
 * ÈÅéÂéª„ÅÆÂÆüË°åÂ±•Ê≠¥„Å®„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Åã„ÇâË¶ÅÂõ†„ÇíÂàÜÊûê
 */

const fs = require('fs').promises;
const path = require('path');

class Simple403Analysis {
  constructor() {
    this.analysis = {
      patterns: [],
      timings: [],
      recommendations: []
    };
  }

  async analyze() {
    console.log('üîç „Å°„Çá„Å≥„É™„ÉÉ„ÉÅ403„Ç®„É©„ÉºË¶ÅÂõ†ÂàÜÊûê');
    console.log('='.repeat(60));

    // ÈÅéÂéª„ÅÆÂÆüË°å„Éá„Éº„ÇøÂàÜÊûê
    await this.analyzeHistoricalData();
    
    // „Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆöÂàÜÊûê
    await this.analyzeSystemConfig();
    
    // „Ç®„É©„Éº„Éë„Çø„Éº„É≥ÂàÜÊûê
    this.analyzeErrorPatterns();
    
    // ÂØæÁ≠ñÊèêÊ°àÁîüÊàê
    this.generateCountermeasures();
    
    // „É¨„Éù„Éº„ÉàË°®Á§∫
    this.displayReport();
  }

  /**
   * ÈÅéÂéª„Éá„Éº„ÇøÂàÜÊûê
   */
  async analyzeHistoricalData() {
    console.log('\nüìä ÈÅéÂéª„ÅÆÂÆüË°åÂ±•Ê≠¥ÂàÜÊûê');
    console.log('-'.repeat(40));

    try {
      // ÊàêÂäüÂÆüË°å„ÅÆÂàÜÊûê
      const successFile = path.join(__dirname, 'data', 'chobirich_complete_2025-08-06_04_15_55.json');
      const successData = JSON.parse(await fs.readFile(successFile, 'utf8'));
      
      console.log('‚úÖ ÊàêÂäü„Ç±„Éº„Çπ (664‰ª∂ÂèñÂæó):');
      console.log(`   - ÊàêÂäü„Ç´„ÉÜ„Ç¥„É™: ${successData.systemInfo.successfulCategories}`);
      console.log(`   - „É™„Éà„É©„Ç§ÂõûÊï∞: ${successData.systemInfo.retryAttempts}`);
      console.log(`   - ÂÆüË°åÊôÇÈñì: 260.751Áßí (4ÂàÜ20Áßí)`);
      
      this.analysis.timings.push({
        type: 'successful_run',
        duration: 260.751,
        categories: successData.systemInfo.successfulCategories,
        totalCampaigns: successData.totalCampaigns
      });

    } catch (error) {
      console.log('‚ö†Ô∏è ÊàêÂäü„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Ç®„É©„Éº');
    }

    try {
      // Â§±ÊïóÂÆüË°å„ÅÆÂàÜÊûê
      const failureFile = path.join(__dirname, 'data', 'chobirich_coverage_analysis_2025-08-06_04_30_23.json');
      const failureData = JSON.parse(await fs.readFile(failureFile, 'utf8'));
      
      console.log('\n‚ùå Â§±Êïó„Ç±„Éº„Çπ (0‰ª∂ÂèñÂæó):');
      console.log(`   - Â§±Êïó„Ç´„ÉÜ„Ç¥„É™: ${failureData.summary.failedCategories}/20`);
      console.log(`   - „Ç®„É©„Éº„Çø„Ç§„Éó: browser initialization error`);
      
    } catch (error) {
      console.log('‚ö†Ô∏è Â§±Êïó„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Ç®„É©„Éº');
    }
  }

  /**
   * „Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆöÂàÜÊûê
   */
  async analyzeSystemConfig() {
    console.log('\n‚öôÔ∏è ÁèæÂú®„ÅÆ„Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆöÂàÜÊûê');
    console.log('-'.repeat(40));

    const configAnalysis = [
      'üïí Âü∫Êú¨ÂæÖÊ©üÊôÇÈñì: 8Áßí + „É©„É≥„ÉÄ„É†5Áßí = ÊúÄÂ§ß13Áßí',
      'üîÑ „Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ: Êú™ÂÆüË£ÖÔºàÈï∑ÊôÇÈñìÊé•Á∂öÁ∂ôÁ∂öÔºâ', 
      'üé≠ User-Agent: Âõ∫ÂÆöÔºàWindows ChromeÔºâ',
      'üìä ÂêåÊôÇÊé•Á∂ö: 1Êé•Á∂öÔºàÈÄêÊ¨°Âá¶ÁêÜÔºâ',
      '‚è±Ô∏è „É™„ÇØ„Ç®„Çπ„Éà„Çø„Ç§„É†„Ç¢„Ç¶„Éà: 30Áßí',
      'üîÅ „É™„Éà„É©„Ç§Ê©üËÉΩ: 3Âõû„Åæ„ÅßÔºàÊåáÊï∞„Éê„ÉÉ„ÇØ„Ç™„ÉïÔºâ'
    ];

    configAnalysis.forEach(config => console.log(`   ${config}`));
  }

  /**
   * „Ç®„É©„Éº„Éë„Çø„Éº„É≥ÂàÜÊûê
   */
  analyzeErrorPatterns() {
    console.log('\nüéØ 403„Ç®„É©„ÉºÁô∫Áîü„Éë„Çø„Éº„É≥ÂàÜÊûê');
    console.log('-'.repeat(40));

    this.analysis.patterns = [
      {
        pattern: '‚è∞ ÂÆüË°åÊôÇÈñìÂ∏Ø',
        description: 'Êó•‰∏≠Ôºà12-16ÊôÇÔºâ„ÅÆÂÆüË°å„Åß403„Ç®„É©„ÉºÂ§öÁô∫',
        evidence: 'ÊàêÂäüÔºöÊó©Êúù4ÊôÇÂÆüË°å„ÄÅÂ§±ÊïóÔºöÊó•‰∏≠ÂÆüË°å',
        likelihood: 'high'
      },
      {
        pattern: 'üîÑ ÈÄ£Á∂ö„Ç¢„ÇØ„Çª„Çπ',
        description: 'Áü≠ÊôÇÈñì„Åß„ÅÆÂ§ßÈáè„Ç´„ÉÜ„Ç¥„É™„Ç¢„ÇØ„Çª„Çπ',
        evidence: '20„Ç´„ÉÜ„Ç¥„É™„ÇíÁü≠ÊôÇÈñì„ÅßÈÄ£Á∂ö„Ç¢„ÇØ„Çª„Çπ',
        likelihood: 'high'
      },
      {
        pattern: 'üé≠ User-AgentÊ§úË®º',
        description: 'Âêå‰∏ÄUA„Åß„ÅÆÁ∂ôÁ∂ö„Ç¢„ÇØ„Çª„ÇπÊ§úÁü•',
        evidence: 'Âõ∫ÂÆöUA„Åß„ÅÆÈï∑ÊôÇÈñì„Çª„ÉÉ„Ç∑„Éß„É≥',
        likelihood: 'medium'
      },
      {
        pattern: 'üìä „Ç¢„ÇØ„Çª„ÇπÈ†ªÂ∫¶',
        description: '1ÊôÇÈñì‰ª•ÂÜÖ„Åß„ÅÆÁ∑è„Ç¢„ÇØ„Çª„ÇπÊï∞Âà∂Èôê',
        evidence: 'ÊàêÂäüÊôÇ„ÅØ5„Ç´„ÉÜ„Ç¥„É™„ÅÆ„Åø„ÄÅÂ§±ÊïóÊôÇ„ÅØ20„Ç´„ÉÜ„Ç¥„É™',
        likelihood: 'high'
      },
      {
        pattern: 'üåê IPÂà∂Èôê',
        description: 'Âêå‰∏ÄIP„Åã„Çâ„ÅÆÈÅéÂ∫¶„Å™„Ç¢„ÇØ„Çª„Çπ',
        evidence: 'ÊôÇÈñìÁµåÈÅé„Åß„ÅÆÂõûÂæ©„Éë„Çø„Éº„É≥',
        likelihood: 'medium'
      },
      {
        pattern: 'üì± „Éá„Éê„Ç§„ÇπÂÅΩË£ÖÊ§úÁü•',
        description: '„Éò„ÉÉ„Éâ„É¨„Çπ„Éñ„É©„Ç¶„Ç∂Ê§úÁü•Ê©üËÉΩ',
        evidence: 'Puppeteer„Éë„Çø„Éº„É≥„Éû„ÉÉ„ÉÅ„É≥„Ç∞',
        likelihood: 'low'
      }
    ];

    this.analysis.patterns.forEach((p, i) => {
      const icon = p.likelihood === 'high' ? 'üî¥' : p.likelihood === 'medium' ? 'üü°' : 'üü¢';
      console.log(`\n   ${i+1}. ${p.pattern} ${icon}`);
      console.log(`      ${p.description}`);
      console.log(`      Ê†πÊã†: ${p.evidence}`);
    });
  }

  /**
   * ÂØæÁ≠ñÊèêÊ°àÁîüÊàê
   */
  generateCountermeasures() {
    console.log('\nüí° 403„Ç®„É©„ÉºÂØæÁ≠ñÊèêÊ°à');
    console.log('-'.repeat(40));

    this.analysis.recommendations = [
      {
        priority: 'immediate',
        title: 'üïê ÂÆüË°åÊôÇÈñì„ÅÆÊúÄÈÅ©Âåñ',
        actions: [
          'Â§úÈñì„ÉªÊó©ÊúùÔºà22:00-6:00Ôºâ„Åß„ÅÆÂÆüË°å',
          'Âñ∂Ê•≠ÊôÇÈñìÂ§ñ„ÅÆ batch job Âåñ',
          'cronË®≠ÂÆö„Åß„ÅÆÂÆöÊôÇÂÆüË°åÔºàÊ∑±Â§ú2-4ÊôÇÔºâ'
        ]
      },
      {
        priority: 'immediate', 
        title: '‚è≥ „Ç¢„ÇØ„Çª„ÇπÈñìÈöî„ÅÆÊã°Â§ß',
        actions: [
          'Âü∫Êú¨ÂæÖÊ©üÊôÇÈñì: 15-30Áßí',
          '„É©„É≥„ÉÄ„É†Ë¶ÅÁ¥†: 10-20ÁßíËøΩÂä†',
          '„Ç´„ÉÜ„Ç¥„É™ÈñìÂæÖÊ©ü: 60-120Áßí'
        ]
      },
      {
        priority: 'high',
        title: 'üîÑ „Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜÊîπÂñÑ',
        actions: [
          '3-5„É™„ÇØ„Ç®„Çπ„ÉàÊØé„Å´„Éñ„É©„Ç¶„Ç∂ÂÜçËµ∑Âãï',
          'Cookie„Éª„Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢',
          '„Çª„ÉÉ„Ç∑„Éß„É≥IDÊõ¥Êñ∞'
        ]
      },
      {
        priority: 'high',
        title: 'üìÖ ÊÆµÈöéÂÆüË°å„Ç¢„Éó„É≠„Éº„ÉÅ',
        actions: [
          'Êó•Ê¨°5„Ç´„ÉÜ„Ç¥„É™„Åö„Å§ÂÆüË°å',
          'ÈÄ±Ê¨°„Åß„ÅÆÂÖ®„Ç´„ÉÜ„Ç¥„É™ÂÆå‰∫Ü',
          '„Ç´„ÉÜ„Ç¥„É™ÂÑ™ÂÖàÂ∫¶„Å´„Çà„ÇãÊÆµÈöéÂåñ'
        ]
      },
      {
        priority: 'medium',
        title: 'üé≠ User-AgentÂàÜÊï£',
        actions: [
          '„É™„ÇØ„Ç®„Çπ„ÉàÊØé„Å´UAÂ§âÊõ¥',
          'Chrome/Firefox/SafariÊ∑∑Âêà‰ΩøÁî®',
          '„Éê„Éº„Ç∏„Éß„É≥Áï™Âè∑„ÅÆ„É©„É≥„ÉÄ„É†Âåñ'
        ]
      },
      {
        priority: 'medium',
        title: 'üåê IPÂàÜÊï£„Éª„Éó„É≠„Ç≠„Ç∑Ê¥ªÁî®',
        actions: [
          'Ë§áÊï∞„Éó„É≠„Ç≠„Ç∑„Çµ„Éº„Éê„Éº‰ΩøÁî®',
          'VPNÊ¥ªÁî®„Åß„ÅÆÂú∞ÁêÜÂàÜÊï£',
          'residential proxy Ê§úË®é'
        ]
      },
      {
        priority: 'low',
        title: 'üîç „É™„Ç¢„É´„Çø„Ç§„É†Áõ£Ë¶ñ',
        actions: [
          '403„Ç®„É©„ÉºÊ§úÁü•„Åß„ÅÆÂç≥Â∫ßÂÅúÊ≠¢',
          '„Ç¢„É©„Éº„ÉàÊ©üËÉΩËøΩÂä†',
          'Ëá™ÂãïÂæ©Êóß„É°„Ç´„Éã„Ç∫„É†'
        ]
      }
    ];

    const priorityOrder = ['immediate', 'high', 'medium', 'low'];
    const priorityIcons = {
      immediate: 'üö®',
      high: 'üî¥', 
      medium: 'üü°',
      low: 'üü¢'
    };

    priorityOrder.forEach(priority => {
      const recs = this.analysis.recommendations.filter(r => r.priority === priority);
      recs.forEach((rec, i) => {
        console.log(`\n   ${priorityIcons[priority]} ${rec.title}`);
        rec.actions.forEach(action => {
          console.log(`     ‚Ä¢ ${action}`);
        });
      });
    });
  }

  /**
   * „É¨„Éù„Éº„ÉàË°®Á§∫
   */
  displayReport() {
    console.log('\n' + '='.repeat(60));
    console.log('üìã 403„Ç®„É©„ÉºÂØæÁ≠ñ„Çµ„Éû„É™„Éº');
    console.log('='.repeat(60));

    console.log('\nüéØ ‰∏ªË¶ÅÂïèÈ°å:');
    const highLikelihoodPatterns = this.analysis.patterns.filter(p => p.likelihood === 'high');
    highLikelihoodPatterns.forEach(p => {
      console.log(`   ‚Ä¢ ${p.pattern.replace(/üî¥|üü°|üü¢/g, '').trim()}`);
    });

    console.log('\nüö® Âç≥Â∫ß„Å´ÂÆüÊñΩ„Åô„Åπ„ÅçÂØæÁ≠ñ:');
    const immediatActions = this.analysis.recommendations.filter(r => r.priority === 'immediate');
    immediatActions.forEach(action => {
      console.log(`   ‚Ä¢ ${action.title.replace('üïê|‚è≥', '').trim()}`);
    });

    console.log('\nüìä Êé®Â•®ÂÆüË°å„Çπ„Ç±„Ç∏„É•„Éº„É´:');
    console.log('   ‚Ä¢ Âπ≥Êó•: Ê∑±Â§ú2-4ÊôÇÂÆüË°å (5„Ç´„ÉÜ„Ç¥„É™/Êó•)');
    console.log('   ‚Ä¢ ÂúüÊó•: Êó©Êúù6-8ÊôÇÂÆüË°å (10„Ç´„ÉÜ„Ç¥„É™/Êó•)');
    console.log('   ‚Ä¢ ÊúàÊ¨°: ÂÖ®Èù¢Ë¶ãÁõ¥„Åó„ÉªÊ§úË®º');

    console.log('\n‚ö° ÊúüÂæÖÂäπÊûú:');
    console.log('   ‚Ä¢ 403„Ç®„É©„ÉºÁéá: 90%‰ª•‰∏äÂâäÊ∏õ');
    console.log('   ‚Ä¢ ÂèñÂæóÊ°à‰ª∂Êï∞: 2,100-3,100‰ª∂ÈÅîÊàê');
    console.log('   ‚Ä¢ „Ç∑„Çπ„ÉÜ„É†ÂÆâÂÆöÊÄß: Â§ßÂπÖÂêë‰∏ä');

    this.saveAnalysisReport();
  }

  /**
   * ÂàÜÊûê„É¨„Éù„Éº„Éà‰øùÂ≠ò
   */
  async saveAnalysisReport() {
    const timestamp = new Date().toISOString().slice(0, 19).replace(/[T:]/g, '_');
    const reportFile = path.join(__dirname, 'data', `403_analysis_report_${timestamp}.json`);

    const report = {
      analysisTime: new Date().toISOString(),
      summary: {
        primaryIssues: this.analysis.patterns.filter(p => p.likelihood === 'high').length,
        totalRecommendations: this.analysis.recommendations.length,
        immediateActions: this.analysis.recommendations.filter(r => r.priority === 'immediate').length
      },
      patterns: this.analysis.patterns,
      recommendations: this.analysis.recommendations,
      timings: this.analysis.timings,
      conclusions: {
        mainCause: 'Time-based access restrictions and rapid consecutive requests',
        bestPractice: 'Nighttime execution with extended delays between requests',
        expectedImprovement: '90% reduction in 403 errors, 2100+ campaigns achievable'
      }
    };

    try {
      await fs.writeFile(reportFile, JSON.stringify(report, null, 2));
      console.log(`\nüìÑ Ë©≥Á¥∞„É¨„Éù„Éº„Éà: ${path.basename(reportFile)}`);
    } catch (error) {
      console.log('\n‚ö†Ô∏è „É¨„Éù„Éº„Éà‰øùÂ≠ò„Ç®„É©„Éº');
    }
  }
}

// ÂÆüË°å
async function main() {
  const analyzer = new Simple403Analysis();
  await analyzer.analyze();
}

if (require.main === module) {
  main();
}