#!/usr/bin/env node

/**
 * Ë©≥Á¥∞„Å™„Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥Â≠òÂú®Á¢∫Ë™ç
 * ÂÆüÈöõ„Å´page=2„Å´„Ç¢„ÇØ„Çª„Çπ„Åó„Å¶Á¢∫Ë™ç
 */

const puppeteer = require('puppeteer');

async function detailedPaginationCheck() {
  console.log('üîç Ë©≥Á¥∞„Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥Â≠òÂú®Á¢∫Ë™ç');
  
  const testUrl = 'https://pc.moppy.jp/category/list.php?parent_category=6&child_category=80&af_sorter=1&page=1';
  
  const browser = await puppeteer.launch({
    headless: false, // Ë¶ñË¶öÁöÑÁ¢∫Ë™ç„ÅÆ„Åü„ÇÅ
    args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-blink-features=AutomationControlled']
  });
  
  try {
    console.log(`\nüìÇ Á∑èÂêàÈÄöË≤©„Ç´„ÉÜ„Ç¥„É™„ÅÆË©≥Á¥∞Ë™øÊüª`);
    console.log(`üîó URL: ${testUrl}`);
    
    // „Éö„Éº„Ç∏1„ÅÆË©≥Á¥∞Ë™øÊüª
    console.log('\nüìÑ „Éö„Éº„Ç∏1„ÅÆË©≥Á¥∞Ë™øÊüª');
    const page1 = await browser.newPage();
    
    await page1.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
    
    await page1.goto(testUrl, {
      waitUntil: 'networkidle2',
      timeout: 30000
    });
    
    await new Promise(r => setTimeout(r, 5000));
    
    const page1Info = await page1.evaluate(() => {
      const result = {
        title: document.title,
        url: window.location.href,
        mainContentItems: 0,
        allPageLinks: [],
        paginationHTML: '',
        totalCountText: '',
        nextPageLink: null,
        bodyText: ''
      };
      
      // „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç¢„Ç§„ÉÜ„É†Êï∞
      const items = document.querySelectorAll('.m-list__item');
      result.mainContentItems = items.length;
      
      // ÂÖ®„Å¶„ÅÆ„Éö„Éº„Ç∏„É™„É≥„ÇØ„ÇíË©≥Á¥∞„Å´Ë™øÊüª
      const allLinks = document.querySelectorAll('a[href]');
      allLinks.forEach(link => {
        const href = link.href;
        const text = link.textContent.trim();
        const className = link.className;
        
        if (href.includes('page=') || text.match(/\d+/) || text.includes('Ê¨°') || text.includes('Ââç') || text.includes('next') || text.includes('prev')) {
          result.allPageLinks.push({
            href: href,
            text: text,
            className: className
          });
        }
      });
      
      // „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥Èñ¢ÈÄ£„ÅÆHTMLË¶ÅÁ¥†„ÇíÊé¢„Åô
      const paginationSelectors = [
        '.pagination',
        '.pager', 
        '.page-nav',
        '[class*="pagination"]',
        '[class*="pager"]',
        '[class*="page"]'
      ];
      
      paginationSelectors.forEach(selector => {
        const element = document.querySelector(selector);
        if (element) {
          result.paginationHTML += `${selector}: ${element.outerHTML.slice(0, 300)}\n`;
        }
      });
      
      // ‰ª∂Êï∞Ë°®Á§∫„ÇíË©≥Á¥∞„Å´Êé¢„Åô
      const countSelectors = ['h1', '.count', '.total', '[class*="count"]', '[class*="total"]'];
      countSelectors.forEach(selector => {
        const element = document.querySelector(selector);
        if (element) {
          const text = element.textContent.trim();
          if (text.includes('‰ª∂') || text.match(/\d+/)) {
            result.totalCountText += `${selector}: ${text}\n`;
          }
        }
      });
      
      // Ê¨°„ÅÆ„Éö„Éº„Ç∏„É™„É≥„ÇØ„ÇíË©≥Á¥∞„Å´Êé¢„Åô
      const nextSelectors = [
        'a[href*="page=2"]',
        'a:contains("Ê¨°")',
        'a:contains(">")',
        'a:contains("next")',
        '.next',
        '.pagination a:last-child'
      ];
      
      nextSelectors.forEach(selector => {
        try {
          const element = document.querySelector(selector);
          if (element) {
            result.nextPageLink = {
              selector: selector,
              href: element.href,
              text: element.textContent.trim()
            };
          }
        } catch (e) {
          // „Çª„É¨„ÇØ„Çø„Ç®„É©„Éº„ÅØÁÑ°Ë¶ñ
        }
      });
      
      // ÂÖ®‰Ωì„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„Åã„Çâ‰ª∂Êï∞ÊÉÖÂ†±„ÇíÊé¢„Åô
      result.bodyText = document.body.textContent.slice(0, 1000);
      
      return result;
    });
    
    console.log(`  üìä 1„Éö„Éº„Ç∏ÁõÆÊ°à‰ª∂Êï∞: ${page1Info.mainContentItems}‰ª∂`);
    console.log(`  üìÑ „Çø„Ç§„Éà„É´: ${page1Info.title}`);
    console.log(`  üîó Ê§úÂá∫„Åï„Çå„Åü„Éö„Éº„Ç∏„É™„É≥„ÇØ: ${page1Info.allPageLinks.length}ÂÄã`);
    
    if (page1Info.allPageLinks.length > 0) {
      console.log(`  üìã „Éö„Éº„Ç∏„É™„É≥„ÇØË©≥Á¥∞:`);
      page1Info.allPageLinks.slice(0, 10).forEach((link, i) => {
        console.log(`    ${i + 1}. "${link.text}" ‚Üí ${link.href.slice(0, 80)}...`);
      });
    }
    
    if (page1Info.totalCountText) {
      console.log(`  üìà ‰ª∂Êï∞Ë°®Á§∫: ${page1Info.totalCountText.replace(/\n/g, ' | ')}`);
    }
    
    if (page1Info.nextPageLink) {
      console.log(`  ‚û°Ô∏è Ê¨°„Éö„Éº„Ç∏„É™„É≥„ÇØÁô∫Ë¶ã: "${page1Info.nextPageLink.text}" ‚Üí ${page1Info.nextPageLink.href}`);
    }
    
    await page1.close();
    
    // „Éö„Éº„Ç∏2„Å∏„ÅÆÁõ¥Êé•„Ç¢„ÇØ„Çª„Çπ„ÉÜ„Çπ„Éà
    console.log('\nüìÑ „Éö„Éº„Ç∏2„Å∏„ÅÆÁõ¥Êé•„Ç¢„ÇØ„Çª„Çπ„ÉÜ„Çπ„Éà');
    const page2Url = testUrl.replace('page=1', 'page=2');
    const page2 = await browser.newPage();
    
    try {
      await page2.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
      
      console.log(`  üîó „Éö„Éº„Ç∏2 URL: ${page2Url}`);
      
      await page2.goto(page2Url, {
        waitUntil: 'networkidle2',
        timeout: 30000
      });
      
      await new Promise(r => setTimeout(r, 3000));
      
      const page2Info = await page2.evaluate(() => {
        const result = {
          title: document.title,
          url: window.location.href,
          mainContentItems: 0,
          isValidPage: false,
          errorMessage: '',
          hasContent: false
        };
        
        // „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç¢„Ç§„ÉÜ„É†Êï∞
        const items = document.querySelectorAll('.m-list__item');
        result.mainContentItems = items.length;
        result.hasContent = items.length > 0;
        
        // „Ç®„É©„Éº„Éö„Éº„Ç∏„Åã„Å©„ÅÜ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        const bodyText = document.body.textContent.toLowerCase();
        if (bodyText.includes('error') || bodyText.includes('not found') || bodyText.includes('„Ç®„É©„Éº')) {
          result.errorMessage = bodyText.slice(0, 200);
        } else {
          result.isValidPage = true;
        }
        
        return result;
      });
      
      console.log(`  üìä „Éö„Éº„Ç∏2Ê°à‰ª∂Êï∞: ${page2Info.mainContentItems}‰ª∂`);
      console.log(`  ‚úÖ ÊúâÂäπ„Å™„Éö„Éº„Ç∏: ${page2Info.isValidPage ? '„ÅØ„ÅÑ' : '„ÅÑ„ÅÑ„Åà'}`);
      console.log(`  üìù „Ç≥„É≥„ÉÜ„É≥„ÉÑÂ≠òÂú®: ${page2Info.hasContent ? '„ÅÇ„Çä' : '„Å™„Åó'}`);
      
      if (page2Info.mainContentItems > 0) {
        console.log(`  üéâ „Éö„Éº„Ç∏2„Å´Ê°à‰ª∂Áô∫Ë¶ãÔºÅË§áÊï∞„Éö„Éº„Ç∏Á¢∫Ë™ç`);
      } else {
        console.log(`  ‚ö†Ô∏è „Éö„Éº„Ç∏2„Å´Ê°à‰ª∂„Å™„Åó`);
      }
      
      if (page2Info.errorMessage) {
        console.log(`  ‚ùå „Ç®„É©„Éº: ${page2Info.errorMessage}`);
      }
      
    } catch (error) {
      console.error(`  ‚ùå „Éö„Éº„Ç∏2„Ç¢„ÇØ„Çª„Çπ„Ç®„É©„Éº: ${error.message}`);
    } finally {
      await page2.close();
    }
    
    // „Éö„Éº„Ç∏3„ÅÆ„ÉÜ„Çπ„Éà„ÇÇÂÆüË°å
    console.log('\nüìÑ „Éö„Éº„Ç∏3„Å∏„ÅÆÁõ¥Êé•„Ç¢„ÇØ„Çª„Çπ„ÉÜ„Çπ„Éà');
    const page3Url = testUrl.replace('page=1', 'page=3');
    const page3 = await browser.newPage();
    
    try {
      await page3.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
      
      await page3.goto(page3Url, { waitUntil: 'networkidle2', timeout: 30000 });
      await new Promise(r => setTimeout(r, 3000));
      
      const page3Info = await page3.evaluate(() => {
        const items = document.querySelectorAll('.m-list__item');
        return { mainContentItems: items.length, hasContent: items.length > 0 };
      });
      
      console.log(`  üìä „Éö„Éº„Ç∏3Ê°à‰ª∂Êï∞: ${page3Info.mainContentItems}‰ª∂`);
      
      if (page3Info.mainContentItems > 0) {
        console.log(`  üéâ „Éö„Éº„Ç∏3„Å´„ÇÇÊ°à‰ª∂Áô∫Ë¶ãÔºÅ„Åï„Çâ„Å´Â§ö„Éö„Éº„Ç∏Â≠òÂú®`);
      }
      
    } catch (error) {
      console.error(`  ‚ùå „Éö„Éº„Ç∏3„Ç¢„ÇØ„Çª„Çπ„Ç®„É©„Éº: ${error.message}`);
    } finally {
      await page3.close();
    }
    
    console.log('\n‚è±Ô∏è 5ÁßíÂæå„Å´„Éñ„É©„Ç¶„Ç∂„ÇíÈñâ„Åò„Åæ„Åô...');
    await new Promise(r => setTimeout(r, 5000));
    
  } catch (error) {
    console.error('‚ùå ÂÖ®‰Ωì„Ç®„É©„Éº:', error);
  } finally {
    await browser.close();
  }
}

detailedPaginationCheck().catch(console.error);