const puppeteer = require('puppeteer');
const fs = require('fs').promises;

class ChobirichResilientScraper {
  constructor() {
    this.baseUrl = 'https://www.chobirich.com';
    this.listingUrl = 'https://www.chobirich.com/smartphone?sort=point';
    this.results = [];
    this.errors = [];
    this.browser = null;
    
    // „Ç®„É©„ÉºÂØæÁ≠ñÁî®„ÅÆË®≠ÂÆö
    this.maxConnectionsPerBrowser = 40; // „Éñ„É©„Ç¶„Ç∂ÂÜçËµ∑Âãï„ÅÆÈñæÂÄ§
    this.connectionCount = 0;
    this.processedCount = 0;
    this.errorCount = 0;
    this.checkpointInterval = 10; // 10‰ª∂„Åî„Å®„Å´„ÉÅ„Çß„ÉÉ„ÇØ„Éù„Ç§„É≥„Éà
    
    // iOS „É¶„Éº„Ç∂„Éº„Ç®„Éº„Ç∏„Çß„É≥„Éà
    this.iosUserAgent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile/15E148 Safari/604.1';
  }

  async sleep(seconds) {
    console.log(`‚è≥ ${seconds}ÁßíÂæÖÊ©ü‰∏≠...`);
    await new Promise(resolve => setTimeout(resolve, seconds * 1000));
  }

  async initBrowser() {
    console.log('üöÄ „Éñ„É©„Ç¶„Ç∂ÂàùÊúüÂåñ‰∏≠...');
    
    // „Çà„ÇäÂÆâÂÆö„Åó„Åü„Éñ„É©„Ç¶„Ç∂Ë®≠ÂÆö
    this.browser = await puppeteer.launch({
      headless: 'new',
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage', // ÂÖ±Êúâ„É°„É¢„É™‰∏çË∂≥ÂØæÁ≠ñ
        '--disable-gpu',
        '--no-first-run',
        '--no-zygote',
        '--disable-features=VizDisplayCompositor',
        '--disable-backgrounding-occluded-windows',
        '--disable-renderer-backgrounding',
        '--disable-background-timer-throttling',
        '--js-flags=--max-old-space-size=2048', // „É°„É¢„É™Êã°Âºµ
        '--disable-web-security'
      ],
      timeout: 60000,
      protocolTimeout: 120000 // „Éó„É≠„Éà„Ç≥„É´„Çø„Ç§„É†„Ç¢„Ç¶„Éà„ÇíÂª∂Èï∑
    });
    
    this.connectionCount = 0;
    console.log('‚úÖ „Éñ„É©„Ç¶„Ç∂ÂàùÊúüÂåñÂÆå‰∫Ü');
  }

  async checkBrowserHealth() {
    try {
      if (!this.browser || !this.browser.isConnected()) {
        console.log('‚ö†Ô∏è „Éñ„É©„Ç¶„Ç∂Êé•Á∂öÂàáÊñ≠Ê§úÂá∫');
        return false;
      }
      
      // „ÉÜ„Çπ„Éà„Éö„Éº„Ç∏„ÇíÈñã„ÅÑ„Å¶Âãï‰ΩúÁ¢∫Ë™ç
      const testPage = await this.browser.newPage();
      await testPage.goto('about:blank', { timeout: 5000 });
      await testPage.close();
      
      return true;
    } catch (error) {
      console.log('‚ö†Ô∏è „Éñ„É©„Ç¶„Ç∂ÂÅ•ÂÖ®ÊÄß„ÉÅ„Çß„ÉÉ„ÇØÂ§±Êïó:', error.message);
      return false;
    }
  }

  async restartBrowser() {
    console.log('üîÑ „Éñ„É©„Ç¶„Ç∂„ÇíÂÆâÂÖ®„Å´ÂÜçËµ∑Âãï‰∏≠...');
    
    // Êó¢Â≠ò„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÇíÈñâ„Åò„Çã
    if (this.browser) {
      try {
        await this.browser.close();
      } catch (error) {
        console.log('„Éñ„É©„Ç¶„Ç∂„ÇØ„É≠„Éº„Ç∫„Ç®„É©„ÉºÔºàÁÑ°Ë¶ñÔºâ:', error.message);
      }
      this.browser = null;
    }
    
    // „Ç¨„Éô„Éº„Ç∏„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥ÂæÖÊ©ü
    await this.sleep(3);
    
    // Êñ∞„Åó„ÅÑ„Éñ„É©„Ç¶„Ç∂„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíËµ∑Âãï
    await this.initBrowser();
  }

  logMemoryUsage() {
    const used = process.memoryUsage();
    console.log(`üìä „É°„É¢„É™: RSS=${Math.round(used.rss / 1024 / 1024)}MB, Heap=${Math.round(used.heapUsed / 1024 / 1024)}MB`);
    
    // „É°„É¢„É™‰ΩøÁî®Èáè„ÅåÈ´ò„ÅÑÂ†¥Âêà„ÅØË≠¶Âëä
    if (used.rss > 1.5 * 1024 * 1024 * 1024) { // 1.5GB‰ª•‰∏ä
      console.log('‚ö†Ô∏è „É°„É¢„É™‰ΩøÁî®Èáè„ÅåÈ´ò„ÅÑ - „Éñ„É©„Ç¶„Ç∂ÂÜçËµ∑ÂãïÊé®Â•®');
      return true;
    }
    return false;
  }

  async saveCheckpoint() {
    const checkpoint = {
      timestamp: new Date().toISOString(),
      processedCount: this.processedCount,
      errorCount: this.errorCount,
      successfulResults: this.results.length,
      lastResults: this.results.slice(-5) // Áõ¥Ëøë5‰ª∂„ÅÆ„Åø‰øùÂ≠ò
    };
    
    await fs.writeFile(
      'chobirich_checkpoint.json',
      JSON.stringify(checkpoint, null, 2)
    );
    
    console.log(`üíæ „ÉÅ„Çß„ÉÉ„ÇØ„Éù„Ç§„É≥„Éà‰øùÂ≠ò: ÊàêÂäü${this.results.length}‰ª∂, „Ç®„É©„Éº${this.errors.length}‰ª∂`);
  }

  async setupPage() {
    const page = await this.browser.newPage();
    
    // „Çø„Ç§„É†„Ç¢„Ç¶„ÉàË®≠ÂÆö
    page.setDefaultTimeout(25000);
    page.setDefaultNavigationTimeout(25000);
    
    // „É™„ÇΩ„Éº„ÇπÊúÄÈÅ©ÂåñÔºàÁîªÂÉè„ÇÑ CSS „ÇíË™≠„ÅøËæº„Åæ„Å™„ÅÑÔºâ
    await page.setRequestInterception(true);
    page.on('request', (req) => {
      const resourceType = req.resourceType();
      if (['image', 'stylesheet', 'font', 'media'].includes(resourceType)) {
        req.abort();
      } else {
        req.continue();
      }
    });
    
    // „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
    page.on('error', error => {
      console.log('„Éö„Éº„Ç∏„Ç®„É©„Éº:', error.message);
    });
    
    await page.setUserAgent(this.iosUserAgent);
    await page.setViewport({ width: 390, height: 844 });
    await page.setExtraHTTPHeaders({
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
      'Accept-Language': 'ja-JP,ja;q=0.9',
      'Accept-Encoding': 'gzip, deflate, br',
      'Referer': 'https://www.chobirich.com/'
    });

    return page;
  }

  convertRedirectToDirectUrl(url) {
    const redirectPattern = /\/ad_details\/redirect\/(\d+)\/?$/;
    const match = url.match(redirectPattern);
    
    if (match) {
      const campaignId = match[1];
      return `${this.baseUrl}/ad_details/${campaignId}/`;
    }
    
    return url;
  }

  isAppCampaign(title, bodyText) {
    const appKeywords = [
      '„Ç¢„Éó„É™', 'app', '„Ç§„É≥„Çπ„Éà„Éº„É´', '„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ', 'DL',
      '„Ç≤„Éº„É†', 'game', '„É¨„Éô„É´', 'level', '„ÇØ„É™„Ç¢', 'clear',
      'iOS', 'iPhone', 'iPad', 'Android', '„Ç¢„É≥„Éâ„É≠„Ç§„Éâ',
      'Google Play', 'App Store', '„Éó„É¨„Ç§', 'play',
      '„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´', 'tutorial', '„Ç¢„Éó„É™„É©„É≥„Éâ'
    ];
    
    const titleLower = title.toLowerCase();
    const bodyTextLower = bodyText.toLowerCase();
    
    return appKeywords.some(keyword => 
      titleLower.includes(keyword.toLowerCase()) || 
      bodyTextLower.includes(keyword.toLowerCase())
    );
  }

  async scrapeCampaignWithRecovery(url, retryCount = 0) {
    const maxRetries = 2;
    const campaignId = url.match(/\/ad_details\/(?:redirect\/)?(\d+)\/?/)?.[1];
    
    try {
      // Êé•Á∂öÊï∞„ÉÅ„Çß„ÉÉ„ÇØ
      this.connectionCount++;
      if (this.connectionCount >= this.maxConnectionsPerBrowser) {
        console.log(`üîÑ ${this.maxConnectionsPerBrowser}Êé•Á∂öÂà∞ÈÅî - „Éñ„É©„Ç¶„Ç∂ÂÜçËµ∑Âãï`);
        await this.restartBrowser();
      }
      
      // „Éñ„É©„Ç¶„Ç∂ÂÅ•ÂÖ®ÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
      const isHealthy = await this.checkBrowserHealth();
      if (!isHealthy) {
        await this.restartBrowser();
      }
      
      const page = await this.setupPage();
      
      try {
        const response = await page.goto(url, { 
          waitUntil: 'domcontentloaded',
          timeout: 25000 
        });
        
        if (response.status() !== 200) {
          console.log(`‚ùå [${campaignId}] „Çπ„ÉÜ„Éº„Çø„Çπ: ${response.status()}`);
          return null;
        }

        await this.sleep(2);

        const data = await page.evaluate(() => {
          // Ê°à‰ª∂„Çø„Ç§„Éà„É´
          let title = '';
          const h1Element = document.querySelector('h1.AdDetails__title');
          if (h1Element) {
            title = h1Element.textContent.trim();
          } else {
            const h1Elements = document.querySelectorAll('h1');
            for (const h1 of h1Elements) {
              const text = h1.textContent.trim();
              if (text && !text.includes('„Å°„Çá„Å≥„É™„ÉÉ„ÉÅ') && text !== '„Ç®„É©„Éº') {
                title = text;
                break;
              }
            }
          }

          // ÈÇÑÂÖÉÁéá
          let cashback = '';
          const pointElement = document.querySelector('.AdDetails__pt.ItemPtLarge');
          if (pointElement) {
            const text = pointElement.textContent.trim();
            const match = text.match(/(\d{1,3}(?:,\d{3})*(?:„Å°„Çá„Å≥)?(?:„Éù„Ç§„É≥„Éà|pt))/);
            if (match) {
              cashback = match[0];
            }
          }
          
          if (!cashback) {
            const pointSelectors = ['.AdDetails__pt', '[class*="point"]', '[class*="pt"]'];
            for (const selector of pointSelectors) {
              const elements = document.querySelectorAll(selector);
              for (const elem of elements) {
                const text = elem.textContent.trim();
                const patterns = [
                  /(\d{1,3}(?:,\d{3})*(?:„Å°„Çá„Å≥)?(?:„Éù„Ç§„É≥„Éà|pt))/,
                  /(\d+(?:\.\d+)?[%ÔºÖ])/
                ];
                
                for (const pattern of patterns) {
                  const match = text.match(pattern);
                  if (match) {
                    cashback = match[1] || match[0];
                    break;
                  }
                }
                if (cashback) break;
              }
              if (cashback) break;
            }
          }

          // Áç≤ÂæóÊñπÊ≥ï
          let method = '';
          const bodyText = document.body.innerText;
          
          const methodPatterns = [
            /Áç≤ÂæóÊñπÊ≥ï[Ôºö:]\s*([^\n]+)/,
            /Êù°‰ª∂[Ôºö:]\s*([^\n]+)/,
            /ÈÅîÊàêÊù°‰ª∂[Ôºö:]\s*([^\n]+)/
          ];
          
          for (const pattern of methodPatterns) {
            const match = bodyText.match(pattern);
            if (match) {
              method = match[1].trim().substring(0, 120);
              break;
            }
          }
          
          if (!method) {
            const appPatterns = [
              /„Ç§„É≥„Çπ„Éà„Éº„É´[^\n„ÄÇ]{0,80}/,
              /„É¨„Éô„É´\s*\d+[^\n„ÄÇ]{0,60}/,
              /\d+Êó•Èñì[^\n„ÄÇ]{0,60}/,
              /„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´[^\n„ÄÇ]{0,60}/,
              /ÂàùÂõû[^\n„ÄÇ]{0,80}/,
              /„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ[^\n„ÄÇ]{0,60}/
            ];
            
            for (const pattern of appPatterns) {
              const match = bodyText.match(pattern);
              if (match) {
                method = match[0].trim().substring(0, 120);
                break;
              }
            }
          }

          // OSÂà§ÂÆö
          let detectedOs = 'unknown';
          const titleLower = title.toLowerCase();
          const bodyTextLower = bodyText.toLowerCase();
          
          const androidKeywords = ['android', '„Ç¢„É≥„Éâ„É≠„Ç§„Éâ', 'google play'];
          const iosKeywords = ['ios', 'iphone', 'ipad', 'app store'];
          
          let isAndroid = androidKeywords.some(keyword => 
            titleLower.includes(keyword) || bodyTextLower.includes(keyword)
          );
          let isIOS = iosKeywords.some(keyword => 
            titleLower.includes(keyword) || bodyTextLower.includes(keyword)
          );
          
          if (isAndroid && isIOS) {
            detectedOs = 'both';
          } else if (isAndroid) {
            detectedOs = 'android';
          } else if (isIOS) {
            detectedOs = 'ios';
          }

          return {
            title: title || '',
            cashback: cashback || '',
            method: method || '',
            detectedOs: detectedOs,
            bodyText: bodyText,
            pageValid: !!title && title !== '„Ç®„É©„Éº'
          };
        });

        if (!data.pageValid) {
          console.log(`‚ùå [${campaignId}] ÁÑ°Âäπ„Å™„Éö„Éº„Ç∏`);
          return null;
        }

        const result = {
          id: campaignId,
          name: data.title,
          url: url,
          cashback: data.cashback || '‰∏çÊòé',
          os: data.detectedOs,
          method: data.method || '‰∏çÊòé',
          isApp: this.isAppCampaign(data.title, data.bodyText),
          timestamp: new Date().toISOString()
        };

        const appStatus = result.isApp ? 'üì± „Ç¢„Éó„É™Ê°à‰ª∂' : 'üìÑ ‰∏ÄËà¨Ê°à‰ª∂';
        console.log(`‚úÖ [${campaignId}] ${data.title} (${data.cashback}) - ${appStatus}`);
        
        this.processedCount++;
        return result;

      } finally {
        try {
          await page.close();
        } catch (error) {
          // „Éö„Éº„Ç∏„ÇØ„É≠„Éº„Ç∫„Ç®„É©„Éº„ÅØÁÑ°Ë¶ñ
        }
      }

    } catch (error) {
      console.log(`‚ùå [${campaignId}] „Ç®„É©„Éº: ${error.message}`);
      this.errorCount++;
      
      // „Ç®„É©„ÉºÁ®ÆÂà•„Å´Âøú„Åò„ÅüÂØæÂá¶
      if (error.message.includes('Protocol error') || 
          error.message.includes('Connection closed') ||
          error.message.includes('Target closed')) {
        console.log('üîÑ Êé•Á∂ö„Ç®„É©„ÉºÊ§úÂá∫ - „Éñ„É©„Ç¶„Ç∂ÂÜçËµ∑Âãï');
        await this.restartBrowser();
      }
      
      // „É™„Éà„É©„Ç§
      if (retryCount < maxRetries) {
        console.log(`üîÅ „É™„Éà„É©„Ç§ ${retryCount + 1}/${maxRetries}`);
        await this.sleep(5);
        return await this.scrapeCampaignWithRecovery(url, retryCount + 1);
      }
      
      return null;
    }
  }

  async extractUrlsFromPages(maxPages = 5) {
    console.log(`üìö ${maxPages}„Éö„Éº„Ç∏„Åã„ÇâURLÊäΩÂá∫ÈñãÂßã`);
    
    const allUrls = new Set();
    
    for (let pageNum = 1; pageNum <= maxPages; pageNum++) {
      console.log(`üìÑ „Éö„Éº„Ç∏ ${pageNum} Âá¶ÁêÜ‰∏≠...`);
      
      const page = await this.setupPage();
      
      try {
        const url = pageNum === 1 
          ? this.listingUrl 
          : `${this.listingUrl}&page=${pageNum}`;
        
        const response = await page.goto(url, { 
          waitUntil: 'domcontentloaded',
          timeout: 25000 
        });
        
        if (response.status() !== 200) {
          console.log(`‚ùå „Éö„Éº„Ç∏ ${pageNum}: „Çπ„ÉÜ„Éº„Çø„Çπ ${response.status()}`);
          continue;
        }

        await this.sleep(2);

        const urls = await page.evaluate(() => {
          const links = document.querySelectorAll('a[href*="/ad_details/"]');
          return Array.from(links)
            .map(link => link.href)
            .filter(href => href && href.includes('/ad_details/'));
        });

        console.log(`üìä „Éö„Éº„Ç∏ ${pageNum}: ${urls.length}‰ª∂„ÅÆURLÁô∫Ë¶ã`);
        
        let newUrls = 0;
        urls.forEach(url => {
          const directUrl = this.convertRedirectToDirectUrl(url);
          if (!allUrls.has(directUrl)) {
            allUrls.add(directUrl);
            newUrls++;
          }
        });
        
        console.log(`üÜï Êñ∞Ë¶èURL: ${newUrls}‰ª∂, Á¥ØË®à: ${allUrls.size}‰ª∂`);
        
        if (pageNum < maxPages) {
          await this.sleep(3);
        }
        
      } catch (error) {
        console.error(`‚ùå „Éö„Éº„Ç∏ ${pageNum} „Åß„Ç®„É©„Éº: ${error.message}`);
      } finally {
        try {
          await page.close();
        } catch (error) {
          // „Éö„Éº„Ç∏„ÇØ„É≠„Éº„Ç∫„Ç®„É©„Éº„ÅØÁÑ°Ë¶ñ
        }
      }
    }
    
    console.log(`\nüéØ ÊäΩÂá∫ÂÆå‰∫Ü: ÂêàË®à ${allUrls.size} ‰ª∂„ÅÆ„É¶„Éã„Éº„ÇØURL`);
    return Array.from(allUrls);
  }

  async run() {
    console.log('üöÄ „Å°„Çá„Å≥„É™„ÉÉ„ÉÅ È´òËÄê‰πÖÊÄß„Ç¢„Éó„É™Ê°à‰ª∂„Çπ„ÇØ„É¨„Ç§„Éë„ÉºÈñãÂßã\n');
    
    try {
      await this.initBrowser();
      
      // URLÊäΩÂá∫ÔºàÊúÄÂàù„ÅÆ5„Éö„Éº„Ç∏„ÅÆ„ÅøÔºâ
      const urls = await this.extractUrlsFromPages(5);
      console.log(`\nüéØ ${urls.length}‰ª∂„ÅÆÊ°à‰ª∂„ÇíÂá¶ÁêÜÈñãÂßã\n`);
      
      // ÂêÑÊ°à‰ª∂„ÅÆË©≥Á¥∞ÂèñÂæó
      for (let i = 0; i < urls.length; i++) {
        const url = urls[i];
        console.log(`[${i + 1}/${urls.length}] ${url}`);
        
        // „É°„É¢„É™‰ΩøÁî®Èáè„ÉÅ„Çß„ÉÉ„ÇØ
        if (i > 0 && i % 15 === 0) {
          const needsRestart = this.logMemoryUsage();
          if (needsRestart) {
            await this.restartBrowser();
          }
        }
        
        const result = await this.scrapeCampaignWithRecovery(url);
        if (result) {
          if (result.isApp) {
            this.results.push(result);
          }
        } else {
          this.errors.push({ url, error: '„Éá„Éº„ÇøÂèñÂæóÂ§±Êïó' });
        }
        
        // „ÉÅ„Çß„ÉÉ„ÇØ„Éù„Ç§„É≥„Éà‰øùÂ≠ò
        if ((i + 1) % this.checkpointInterval === 0) {
          await this.saveCheckpoint();
        }
        
        // ÈÄ≤Ë°åÁä∂Ê≥ÅË°®Á§∫
        if ((i + 1) % 20 === 0) {
          console.log(`\nüìä ÈÄ≤Ë°åÁä∂Ê≥Å: ${i + 1}/${urls.length} („Ç¢„Éó„É™Ê°à‰ª∂: ${this.results.length}‰ª∂)\n`);
        }
        
        if (i < urls.length - 1) {
          await this.sleep(3);
        }
      }

      // ÊúÄÁµÇÁµêÊûú‰øùÂ≠ò
      const output = {
        scrape_date: new Date().toISOString(),
        strategy: 'resilient_ios_app_scraper',
        summary: {
          total_urls: urls.length,
          processed: this.processedCount,
          app_campaigns: this.results.length,
          errors: this.errors.length,
          success_rate: `${((this.processedCount / urls.length) * 100).toFixed(1)}%`,
          app_success_rate: `${((this.results.length / this.processedCount) * 100).toFixed(1)}%`,
          os_breakdown: {
            ios: this.results.filter(r => r.os === 'ios').length,
            android: this.results.filter(r => r.os === 'android').length,
            both: this.results.filter(r => r.os === 'both').length,
            unknown: this.results.filter(r => r.os === 'unknown').length
          }
        },
        app_campaigns: this.results,
        errors: this.errors.slice(0, 10) // „Ç®„É©„Éº„ÅØÊúÄÂàù„ÅÆ10‰ª∂„ÅÆ„Åø‰øùÂ≠ò
      };

      await fs.writeFile(
        'chobirich_resilient_app_results.json',
        JSON.stringify(output, null, 2)
      );

      console.log('\n' + '='.repeat(60));
      console.log('üìä È´òËÄê‰πÖÊÄß„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞ÂÆå‰∫ÜÔºÅ');
      console.log('='.repeat(60));
      console.log(`üìÑ Á∑èÊ°à‰ª∂Êï∞: ${urls.length}‰ª∂`);
      console.log(`‚úÖ Âá¶ÁêÜÊàêÂäü: ${this.processedCount}‰ª∂`);
      console.log(`üì± „Ç¢„Éó„É™Ê°à‰ª∂: ${this.results.length}‰ª∂`);
      console.log(`‚ùå „Ç®„É©„Éº: ${this.errors.length}‰ª∂`);
      console.log(`üìà Âá¶ÁêÜÊàêÂäüÁéá: ${output.summary.success_rate}`);
      console.log(`üì± „Ç¢„Éó„É™Áô∫Ë¶ãÁéá: ${output.summary.app_success_rate}`);
      
      console.log('\nüì± „Ç¢„Éó„É™Ê°à‰ª∂„ÅÆOSÂà•ÂÜÖË®≥:');
      console.log(`iOS: ${output.summary.os_breakdown.ios}‰ª∂`);
      console.log(`Android: ${output.summary.os_breakdown.android}‰ª∂`);
      console.log(`‰∏°ÂØæÂøú: ${output.summary.os_breakdown.both}‰ª∂`);
      console.log(`‰∏çÊòé: ${output.summary.os_breakdown.unknown}‰ª∂`);
      
      console.log('\nüíæ ÁµêÊûú„Çíchobirich_resilient_app_results.json„Å´‰øùÂ≠ò„Åó„Åæ„Åó„Åü');

      if (this.results.length > 0) {
        console.log('\n‚úÖ ÂèñÂæóÊàêÂäü„Åó„Åü„Ç¢„Éó„É™Ê°à‰ª∂‰æã:');
        this.results.slice(0, 10).forEach((item, index) => {
          console.log(`${index + 1}. ${item.name} (${item.cashback}) - OS: ${item.os}`);
        });
      }
      
    } catch (error) {
      console.error('Ëá¥ÂëΩÁöÑ„Ç®„É©„Éº:', error);
      await this.saveCheckpoint(); // „Ç®„É©„ÉºÊôÇ„ÇÇ„ÉÅ„Çß„ÉÉ„ÇØ„Éù„Ç§„É≥„Éà‰øùÂ≠ò
    } finally {
      if (this.browser) {
        try {
          await this.browser.close();
        } catch (error) {
          console.log('„Éñ„É©„Ç¶„Ç∂„ÇØ„É≠„Éº„Ç∫„Ç®„É©„Éº:', error.message);
        }
      }
    }
  }
}

// ÂÆüË°å
(async () => {
  const scraper = new ChobirichResilientScraper();
  await scraper.run();
})();