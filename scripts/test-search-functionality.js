const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://pjjhyzbnnslaauwzknrr.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBqamh5emJubnNsYWF1d3prbnJyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA5ODg4MzksImV4cCI6MjA2NjU2NDgzOX0.qcrcwNpwX83dCNbhxFaks2E68K_wp2W8urdYwfenDtM';

class SearchAPITester {
  constructor() {
    this.supabase = createClient(supabaseUrl, supabaseKey);
  }

  // Ê§úÁ¥¢API „É≠„Ç∏„ÉÉ„ÇØ„ÅÆ„ÉÜ„Çπ„ÉàÔºàAPI„É´„Éº„Éà„Å®Âêå„Åò„É≠„Ç∏„ÉÉ„ÇØÔºâ
  async testSearch(params = {}) {
    const {
      keyword = '',
      category = '',
      device = '',
      sort = 'name',
      order = 'asc',
      page = 1,
      limit = 20,
      site = ''
    } = params;

    console.log(`üîç „ÉÜ„Çπ„ÉàÂÆüË°å: ${JSON.stringify(params)}`);

    try {
      // „Éö„Éº„Ç∏„É≥„Ç∞„ÅÆË®àÁÆó
      const pageNum = Math.max(1, parseInt(page));
      const pageSize = Math.min(100, Math.max(1, parseInt(limit)));
      const offset = (pageNum - 1) * pageSize;

      // „Éô„Éº„Çπ„ÇØ„Ç®„É™„ÅÆÊßãÁØâ
      let query = this.supabase
        .from('campaigns')
        .select(`
          id,
          name,
          cashback_rate,
          device,
          campaign_url,
          description,
          category,
          is_active,
          created_at,
          updated_at,
          point_sites (
            id,
            name,
            url
          )
        `, { count: 'exact' })
        .eq('is_active', true);

      // „Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢
      if (keyword) {
        query = query.or(`name.ilike.%${keyword}%,description.ilike.%${keyword}%`);
      }

      // „Ç´„ÉÜ„Ç¥„É™„Éï„Ç£„É´„Çø„Éº
      if (category) {
        query = query.eq('category', category);
      }

      // „Éá„Éê„Ç§„Çπ„Éï„Ç£„É´„Çø„Éº
      if (device) {
        query = query.eq('device', device);
      }

      // „Éù„Ç§„É≥„Éà„Çµ„Ç§„Éà„Éï„Ç£„É´„Çø„Éº
      if (site) {
        const { data: siteData } = await this.supabase
          .from('point_sites')
          .select('id')
          .ilike('name', `%${site}%`);
        
        if (siteData && siteData.length > 0) {
          const siteIds = siteData.map(s => s.id);
          query = query.in('point_site_id', siteIds);
        } else {
          return {
            campaigns: [],
            total: 0,
            page: pageNum,
            limit: pageSize,
            totalPages: 0,
            message: 'Ë©≤ÂΩì„Çµ„Ç§„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'
          };
        }
      }

      // „ÇΩ„Éº„Éà
      const validSortColumns = ['name', 'created_at', 'updated_at', 'category'];
      const sortColumn = validSortColumns.includes(sort) ? sort : 'name';
      const sortOrder = order === 'desc' ? false : true;
      
      query = query.order(sortColumn, { ascending: sortOrder });

      // „Éö„Éº„Ç∏„É≥„Ç∞
      query = query.range(offset, offset + pageSize - 1);

      // „ÇØ„Ç®„É™ÂÆüË°å
      const { data: campaigns, count, error } = await query;

      if (error) {
        console.error('‚ùå Ê§úÁ¥¢„Ç®„É©„Éº:', error);
        return { error: error.message };
      }

      // „É¨„Çπ„Éù„É≥„Çπ
      const totalPages = Math.ceil(count / pageSize);

      const result = {
        campaigns: campaigns || [],
        total: count || 0,
        page: pageNum,
        limit: pageSize,
        totalPages,
        hasNext: pageNum < totalPages,
        hasPrev: pageNum > 1
      };

      console.log(`‚úÖ ÊàêÂäü: ${result.total}‰ª∂‰∏≠ ${result.campaigns.length}‰ª∂„ÇíÂèñÂæó`);
      return result;

    } catch (error) {
      console.error('üí• „ÉÜ„Çπ„Éà„Ç®„É©„Éº:', error);
      return { error: error.message };
    }
  }

  async runAllTests() {
    console.log('üß™ Ê§úÁ¥¢Ê©üËÉΩ„ÉÜ„Çπ„ÉàÈñãÂßã');
    console.log('='.repeat(60));

    const tests = [
      {
        name: 'Âü∫Êú¨Ê§úÁ¥¢ÔºàÂÖ®‰ª∂ÂèñÂæóÔºâ',
        params: { limit: 5 }
      },
      {
        name: '„Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢Ôºà„Ç∑„Éß„ÉÉ„ÉóÔºâ',
        params: { keyword: '„Ç∑„Éß„ÉÉ„Éó', limit: 3 }
      },
      {
        name: '„Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢Ôºà„Ç¢„Éó„É™Ôºâ',
        params: { keyword: '„Ç¢„Éó„É™', limit: 3 }
      },
      {
        name: '„Ç´„ÉÜ„Ç¥„É™„Éï„Ç£„É´„ÇøÔºàshoppingÔºâ',
        params: { category: 'shopping', limit: 3 }
      },
      {
        name: '„Ç´„ÉÜ„Ç¥„É™„Éï„Ç£„É´„ÇøÔºàfinanceÔºâ',
        params: { category: 'finance', limit: 3 }
      },
      {
        name: '„Çµ„Ç§„Éà„Éï„Ç£„É´„ÇøÔºà„Å°„Çá„Å≥„É™„ÉÉ„ÉÅÔºâ',
        params: { site: '„Å°„Çá„Å≥„É™„ÉÉ„ÉÅ', limit: 3 }
      },
      {
        name: '„Éö„Éº„Ç∏„É≥„Ç∞Ôºà2„Éö„Éº„Ç∏ÁõÆÔºâ',
        params: { page: 2, limit: 2 }
      },
      {
        name: '„ÇΩ„Éº„ÉàÔºà‰ΩúÊàêÊó•ÈôçÈ†ÜÔºâ',
        params: { sort: 'created_at', order: 'desc', limit: 3 }
      },
      {
        name: 'Ë§áÂêàÊ§úÁ¥¢Ôºà„Ç∑„Éß„ÉÉ„Éó + shoppingÔºâ',
        params: { keyword: '„Ç∑„Éß„ÉÉ„Éó', category: 'shopping', limit: 2 }
      }
    ];

    for (const test of tests) {
      console.log(`\nüìã ${test.name}`);
      console.log('-'.repeat(40));
      
      const result = await this.testSearch(test.params);
      
      if (result.error) {
        console.log(`‚ùå „Ç®„É©„Éº: ${result.error}`);
      } else {
        console.log(`‚úÖ ÊàêÂäü - Á∑è‰ª∂Êï∞: ${result.total}‰ª∂, Ë°®Á§∫: ${result.campaigns.length}‰ª∂`);
        console.log(`üìÑ „Éö„Éº„Ç∏: ${result.page}/${result.totalPages}`);
        
        if (result.campaigns.length > 0) {
          console.log('üéØ „Çµ„É≥„Éó„É´Ê°à‰ª∂:');
          result.campaigns.slice(0, 2).forEach((campaign, i) => {
            console.log(`   ${i+1}. ${campaign.name}`);
            console.log(`      „Ç´„ÉÜ„Ç¥„É™: ${campaign.category}, „Éá„Éê„Ç§„Çπ: ${campaign.device}`);
            console.log(`      ÈÇÑÂÖÉ: ${campaign.cashback_rate}`);
          });
        }
      }
      
      // Â∞ë„ÅóÂæÖÊ©ü
      await new Promise(resolve => setTimeout(resolve, 200));
    }

    console.log('\n' + '='.repeat(60));
    console.log('üéâ ÂÖ®„ÉÜ„Çπ„ÉàÂÆå‰∫Ü');
    
    // Áµ±Ë®àÊÉÖÂ†±„ÇíË°®Á§∫
    await this.showStatistics();
  }

  async showStatistics() {
    console.log('\nüìä „Éá„Éº„Çø„Éô„Éº„ÇπÁµ±Ë®àÊÉÖÂ†±');
    console.log('='.repeat(60));

    try {
      // Á∑è„Ç≠„É£„É≥„Éö„Éº„É≥Êï∞
      const { count: totalCampaigns } = await this.supabase
        .from('campaigns')
        .select('*', { count: 'exact', head: true })
        .eq('is_active', true);
      
      console.log(`üìà ÊúâÂäπ„Ç≠„É£„É≥„Éö„Éº„É≥Á∑èÊï∞: ${totalCampaigns}‰ª∂`);

      // „Ç´„ÉÜ„Ç¥„É™Âà•Áµ±Ë®à
      const { data: categoryStats } = await this.supabase
        .from('campaigns')
        .select('category')
        .eq('is_active', true);
      
      if (categoryStats) {
        const categoryCounts = {};
        categoryStats.forEach(item => {
          categoryCounts[item.category] = (categoryCounts[item.category] || 0) + 1;
        });
        
        console.log('\nüìã „Ç´„ÉÜ„Ç¥„É™Âà•Áµ±Ë®à:');
        Object.entries(categoryCounts).forEach(([category, count]) => {
          console.log(`   ${category}: ${count}‰ª∂`);
        });
      }

      // „Éá„Éê„Ç§„ÇπÂà•Áµ±Ë®à
      const { data: deviceStats } = await this.supabase
        .from('campaigns')
        .select('device')
        .eq('is_active', true);
      
      if (deviceStats) {
        const deviceCounts = {};
        deviceStats.forEach(item => {
          deviceCounts[item.device] = (deviceCounts[item.device] || 0) + 1;
        });
        
        console.log('\nüì± „Éá„Éê„Ç§„ÇπÂà•Áµ±Ë®à:');
        Object.entries(deviceCounts).forEach(([device, count]) => {
          console.log(`   ${device}: ${count}‰ª∂`);
        });
      }

      // „Éù„Ç§„É≥„Éà„Çµ„Ç§„ÉàÂà•Áµ±Ë®à
      const { data: pointSiteStats } = await this.supabase
        .from('campaigns')
        .select(`
          point_site_id,
          point_sites (
            name
          )
        `)
        .eq('is_active', true);
      
      if (pointSiteStats) {
        const siteCounts = {};
        pointSiteStats.forEach(item => {
          const siteName = item.point_sites?.name || 'Unknown';
          siteCounts[siteName] = (siteCounts[siteName] || 0) + 1;
        });
        
        console.log('\nüè™ „Éù„Ç§„É≥„Éà„Çµ„Ç§„ÉàÂà•Áµ±Ë®à:');
        Object.entries(siteCounts).forEach(([site, count]) => {
          console.log(`   ${site}: ${count}‰ª∂`);
        });
      }

    } catch (error) {
      console.error('Áµ±Ë®àÊÉÖÂ†±ÂèñÂæó„Ç®„É©„Éº:', error);
    }
  }
}

// „ÉÜ„Çπ„ÉàÂÆüË°å
(async () => {
  const tester = new SearchAPITester();
  await tester.runAllTests();
})();