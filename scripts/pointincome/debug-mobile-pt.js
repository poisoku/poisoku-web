const puppeteer = require('puppeteer');

async function debugMobilePt() {
  const browser = await puppeteer.launch({
    headless: false,
    args: ['--no-sandbox'],
    defaultViewport: { width: 375, height: 812 }
  });

  const page = await browser.newPage();
  await page.setUserAgent('Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1');

  // Ë§áÊï∞„ÅÆÊ°à‰ª∂„Çí„ÉÜ„Çπ„Éà
  const testUrls = [
    { name: 'TAOÔºàÊ≠£Ëß£: 5,500pt = 550ÂÜÜÔºâ', url: 'https://sp.pointi.jp/ad/152504/' },
    { name: '„Åø„Çì„Å™„ÅÆÈäÄË°åÔºàÊ≠£Ëß£: 15,000pt = 1,500ÂÜÜÔºâ', url: 'https://sp.pointi.jp/ad/151741/' },
    { name: 'Merge Inn AndroidÔºàÊ≠£Ëß£: 5,000pt = 500ÂÜÜÔºâ', url: 'https://sp.pointi.jp/ad/153335/' }
  ];

  for (const test of testUrls) {
    console.log(`\nüîç „Éá„Éê„ÉÉ„Ç∞: ${test.name}`);
    console.log(`URL: ${test.url}`);
    
    await page.goto(test.url, { waitUntil: 'networkidle2' });
    await new Promise(resolve => setTimeout(resolve, 2000));

    const pageData = await page.evaluate(() => {
      const data = {
        allTexts: [],
        pointTexts: [],
        percentTexts: []
      };

      // ÂÖ®„Å¶„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÇíÂèéÈõÜ
      document.querySelectorAll('*').forEach(el => {
        const text = el.textContent?.trim();
        if (text && text.length < 100) {
          // ptË°®Ë®ò„ÇíÂê´„ÇÄ„ÉÜ„Ç≠„Çπ„Éà
          if (text.match(/\d{1,3}(?:,\d{3})*(?:\.\d+)?pt/i)) {
            data.pointTexts.push({
              text: text,
              selector: el.className || el.tagName,
              parent: el.parentElement?.className || el.parentElement?.tagName
            });
          }
          // %Ë°®Ë®ò„ÇíÂê´„ÇÄ„ÉÜ„Ç≠„Çπ„Éà
          if (text.includes('%') && text.includes('ÈÇÑÂÖÉ')) {
            data.percentTexts.push({
              text: text,
              selector: el.className || el.tagName
            });
          }
        }
      });

      // ÁâπÂÆö„ÅÆ„Çª„É¨„ÇØ„Çø„Éº„ÇíË™øÊüª
      const selectors = [
        '.point',
        '.detail_calcu_pt',
        '.ad_pt',
        '.pt_yen',
        '.point-triangle',
        '.box_point_joken'
      ];

      selectors.forEach(selector => {
        const elements = document.querySelectorAll(selector);
        elements.forEach(el => {
          const text = el.textContent?.trim();
          if (text) {
            data.allTexts.push({
              selector: selector,
              text: text,
              className: el.className
            });
          }
        });
      });

      return data;
    });

    console.log('\nüìä Áô∫Ë¶ã„Åï„Çå„ÅüptË°®Ë®ò:');
    pageData.pointTexts.forEach(item => {
      console.log(`  - "${item.text}" (${item.selector})`);
    });

    console.log('\n‚ö†Ô∏è Áô∫Ë¶ã„Åï„Çå„Åü%ÈÇÑÂÖÉË°®Ë®ò:');
    pageData.percentTexts.forEach(item => {
      console.log(`  - "${item.text}" (${item.selector})`);
    });

    // „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà‰øùÂ≠ò
    await page.screenshot({ 
      path: `debug-mobile-${test.name.replace(/[^a-zA-Z0-9]/g, '_')}.png`,
      fullPage: true 
    });
  }

  await browser.close();
}

debugMobilePt().catch(console.error);