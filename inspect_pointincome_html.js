#!/usr/bin/env node

const puppeteer = require('puppeteer');

async function inspectPointIncomeHTML() {
  console.log('üîç „Éù„Ç§„É≥„Éà„Ç§„É≥„Ç´„É†HTMLÊßãÈÄ†Ë™øÊüª');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  const page = await browser.newPage();
  
  try {
    await page.goto('https://pointi.jp/list.php?category=66', { 
      waitUntil: 'networkidle2',
      timeout: 20000 
    });

    console.log('‚úÖ „Éö„Éº„Ç∏„É≠„Éº„ÉâÊàêÂäü');
    
    // „Éö„Éº„Ç∏„ÅÆÂü∫Êú¨ÊÉÖÂ†±
    const title = await page.title();
    console.log(`üìÑ „Éö„Éº„Ç∏„Çø„Ç§„Éà„É´: ${title}`);
    
    // .box_ad Ë¶ÅÁ¥†„ÅÆÊï∞
    const boxAdCount = await page.$$eval('.box_ad', elements => elements.length);
    console.log(`üì¶ .box_ad Ë¶ÅÁ¥†Êï∞: ${boxAdCount}`);
    
    // ÊúÄÂàù„ÅÆ .box_ad „ÅÆÂÜÖÂÆπ„ÇíË©≥„Åó„ÅèË™øÊüª
    if (boxAdCount > 0) {
      const firstAdStructure = await page.evaluate(() => {
        const firstAd = document.querySelector('.box_ad');
        if (!firstAd) return null;
        
        return {
          innerHTML: firstAd.innerHTML.substring(0, 500) + '...',
          titleElement: firstAd.querySelector('.title_list') ? 
            firstAd.querySelector('.title_list').textContent.trim() : '„Çø„Ç§„Éà„É´Ë¶ÅÁ¥†„Å™„Åó',
          linkElement: firstAd.querySelector('a[href*="./ad/"]') ? 
            firstAd.querySelector('a[href*="./ad/"]').getAttribute('href') : '„É™„É≥„ÇØË¶ÅÁ¥†„Å™„Åó',
          pointElement: firstAd.querySelector('.list_pt_box .list_pt') ? 
            firstAd.querySelector('.list_pt_box .list_pt').textContent.trim() : '„Éù„Ç§„É≥„ÉàË¶ÅÁ¥†„Å™„Åó'
        };
      });
      
      console.log('üìã ÊúÄÂàù„ÅÆÊ°à‰ª∂ÊßãÈÄ†:');
      console.log(`  „Çø„Ç§„Éà„É´: ${firstAdStructure.titleElement}`);
      console.log(`  „É™„É≥„ÇØ: ${firstAdStructure.linkElement}`);
      console.log(`  „Éù„Ç§„É≥„Éà: ${firstAdStructure.pointElement}`);
    }
    
    // „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥Èñ¢ÈÄ£Ë¶ÅÁ¥†„ÅÆË™øÊüª
    const paginationStructure = await page.evaluate(() => {
      // „Åô„Åπ„Å¶„ÅÆ„É™„É≥„ÇØ„ÇíË™øÊüª
      const allLinks = Array.from(document.querySelectorAll('a'));
      const paginationLinks = allLinks.filter(link => {
        const text = link.textContent.trim();
        const onclick = link.getAttribute('onclick');
        return text.includes('Ê¨°') || text.includes('Ââç') || text.includes('>') || text.includes('<') || 
               (onclick && onclick.includes('tab_select'));
      });
      
      return {
        totalLinks: allLinks.length,
        paginationLinks: paginationLinks.map(link => ({
          text: link.textContent.trim(),
          onclick: link.getAttribute('onclick'),
          href: link.getAttribute('href'),
          className: link.className,
          id: link.id
        }))
      };
    });
    
    console.log(`üîó Á∑è„É™„É≥„ÇØÊï∞: ${paginationStructure.totalLinks}`);
    console.log('üîó „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥Èñ¢ÈÄ£„É™„É≥„ÇØ:');
    paginationStructure.paginationLinks.forEach((link, i) => {
      console.log(`  ${i+1}. "${link.text}" (onclick: ${link.onclick}, href: ${link.href})`);
    });
    
    // tab_select Èñ¢Êï∞„ÅÆË©≥Á¥∞
    const tabSelectInfo = await page.evaluate(() => {
      if (typeof window.tab_select === 'function') {
        return {
          exists: true,
          functionString: window.tab_select.toString().substring(0, 200) + '...'
        };
      }
      return { exists: false };
    });
    
    console.log(`üîß tab_selectÈñ¢Êï∞: ${tabSelectInfo.exists ? 'Â≠òÂú®' : 'Â≠òÂú®„Åó„Å™„ÅÑ'}`);
    if (tabSelectInfo.exists) {
      console.log(`   Èñ¢Êï∞ÂÜÖÂÆπ„ÅÆÊúÄÂàù200ÊñáÂ≠ó: ${tabSelectInfo.functionString}`);
    }
    
    console.log('\nüì∏ HTML„Çπ„Éä„ÉÉ„Éó„Ç∑„Éß„ÉÉ„Éà„ÇíÂèñÂæó‰∏≠...');
    const htmlSnippet = await page.evaluate(() => {
      // „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥ÈÉ®ÂàÜ„ÇíÂê´„ÇÄ HTML „ÅÆ‰∏ÄÈÉ®„ÇíÂèñÂæó
      const body = document.body;
      if (body) {
        const html = body.innerHTML;
        const start = html.indexOf('Ê¨°„Å∏') - 200;
        const end = html.indexOf('Ê¨°„Å∏') + 200;
        return html.substring(Math.max(0, start), end);
      }
      return 'HTMLÂèñÂæó‰∏çÂèØ';
    });
    
    console.log('üì∏ „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥Âë®Ëæ∫HTML:');
    console.log(htmlSnippet.substring(0, 300) + '...');
    
    await new Promise(resolve => setTimeout(resolve, 5000));
    
  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error.message);
  } finally {
    await browser.close();
  }
}

inspectPointIncomeHTML();